{
    "name": "jQuery Multilingual Input",
    "tagline": "A jQuery plugin that lets you turn a simple input into a multilingual one.",
    "body":"#Jquery Multilingual input\r\n\r\nThis is a simple Jquery plugin that turns an input into a multiligual one, the input is styled using Bootstrap 2.3.1\r\n\r\nAn exemple of how this works:\r\n\t\r\nInitial state:\r\n\r\n\t| DE | _____ | FR | IT |\r\n    \r\nClick on `FR`\r\n\r\n\t| DE | FR | _____ | IT |\r\n    \r\nClick on `IT`\r\n\r\n\t| DE | FR | IT | _____ |\r\n    \r\nwhere:\r\n\r\n* `DE`, `FR` and `IT` are appended/prepended buttons.\r\n* only ONE of the inputs is visible: the one after the clicked button language\r\n* the initial state is with the first language input visible\r\n\r\n##How to install\r\n\r\nSimply add \r\n\r\n\t<link rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css\">\r\n    <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.10.2.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"i18n.js\"></script>\r\n    \r\nmake sure you add the plugin after the jquery and you are good to go\r\n\r\n##How to use\r\n\r\nThis only works on text inputs so make sure to add `type=\"text\"` to the inputs.\r\n\r\nTo make this work simply select the input/multiple inputs you want to change and call the `.i18n()` function.\r\n\r\n\t<input type=\"text\" id=\"myInput\">\r\n    \r\nnow just call the function\r\n\r\n\t$('#myInput').i18n({\r\n    \tlocales: ['en', 'it', 'ro'],\r\n        attribute: 'data-key'\r\n    });\r\n\r\nThe function takes two options `locales` and `attribute`\r\n\r\n* If `locales` option is found, then the plugin will generate as many buttons and inputs as provided locales. Button text will be the uppercase locale.\r\n\r\n* If no `locales` option is found, then a `data-i18n` will be searched for in the processed input and this should have a comma separated locale value: `data-i18n=\"de,en,fr\"`.\r\n\r\n* Note: even if the `locales` option is given, the plugin will still search for the `data-i18n` atribute, and if such attribute is found it will overwrite the `locales` option.\r\n\r\n* If no `locales` option and no `data-i18n' atribute is found, then nothing will happen to the input.\r\n\r\n\r\n*\tif the  `atribute` option is found, then the plugin will append to the generated inputs the coressponding locale using dot notation, ex: `data-key=\"some_value.de\"`.\r\n\r\n*\tif the option is found and it has no value, then the atribute of the inputs will only receive the coressponding locale, ex: `data-key=\"de\"`.\r\n\r\n* if the `atribute` option is not found, then the default 'data-field' option will be added.\r\n\r\n    \r\n",
    "google":"",
    "note":"Don't delete this file! It's used internally to help with page regeneration."
}
